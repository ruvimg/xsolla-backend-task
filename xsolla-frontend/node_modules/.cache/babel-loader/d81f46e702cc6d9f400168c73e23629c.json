{"ast":null,"code":"import { CREATE_PRODUCT, RETRIEVE_PRODUCTS, UPDATE_PRODUCT, DELETE_PRODUCT, DELETE_ALL_PRODUCTS } from \"../actions/types\";\nconst initialState = [];\n\nfunction productReducer(products = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CREATE_PRODUCT:\n      return [...products, payload];\n\n    case RETRIEVE_PRODUCTS:\n      return payload;\n\n    case UPDATE_PRODUCT:\n      return products.map(product => {\n        if (product.id === payload.id) {\n          return { ...product,\n            ...payload\n          };\n        } else {\n          return product;\n        }\n      });\n\n    case DELETE_PRODUCT:\n      return products.filter(({\n        id\n      }) => id !== payload.id);\n\n    case DELETE_ALL_PRODUCTS:\n      return [];\n\n    default:\n      return products;\n  }\n}\n\n;\nexport default productReducer;","map":{"version":3,"sources":["/Users/ruvim/Documents/projects/xsolla/react-crud/src/reducers/products.js"],"names":["CREATE_PRODUCT","RETRIEVE_PRODUCTS","UPDATE_PRODUCT","DELETE_PRODUCT","DELETE_ALL_PRODUCTS","initialState","productReducer","products","action","type","payload","map","product","id","filter"],"mappings":"AAAA,SACIA,cADJ,EAEIC,iBAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,mBALJ,QAMO,kBANP;AAQA,MAAMC,YAAY,GAAG,EAArB;;AAEA,SAASC,cAAT,CAAwBC,QAAQ,GAAGF,YAAnC,EAAiDG,MAAjD,EAAyD;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACI,SAAKT,cAAL;AACI,aAAO,CAAC,GAAGO,QAAJ,EAAcG,OAAd,CAAP;;AAEJ,SAAKT,iBAAL;AACI,aAAOS,OAAP;;AAEJ,SAAKR,cAAL;AACI,aAAOK,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AAC7B,YAAIA,OAAO,CAACC,EAAR,KAAeH,OAAO,CAACG,EAA3B,EAA+B;AAC3B,iBAAO,EACH,GAAGD,OADA;AAEH,eAAGF;AAFA,WAAP;AAIH,SALD,MAKO;AACH,iBAAOE,OAAP;AACH;AACJ,OATM,CAAP;;AAWJ,SAAKT,cAAL;AACI,aAAOI,QAAQ,CAACO,MAAT,CAAgB,CAAC;AAAED,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKH,OAAO,CAACG,EAA3C,CAAP;;AAEJ,SAAKT,mBAAL;AACI,aAAO,EAAP;;AAEJ;AACI,aAAOG,QAAP;AA1BR;AA4BH;;AAAA;AAED,eAAeD,cAAf","sourcesContent":["import {\n    CREATE_PRODUCT,\n    RETRIEVE_PRODUCTS,\n    UPDATE_PRODUCT,\n    DELETE_PRODUCT,\n    DELETE_ALL_PRODUCTS\n} from \"../actions/types\";\n\nconst initialState = [];\n\nfunction productReducer(products = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case CREATE_PRODUCT:\n            return [...products, payload];\n\n        case RETRIEVE_PRODUCTS:\n            return payload;\n\n        case UPDATE_PRODUCT:\n            return products.map((product) => {\n                if (product.id === payload.id) {\n                    return {\n                        ...product,\n                        ...payload,\n                    };\n                } else {\n                    return product;\n                }\n            });\n\n        case DELETE_PRODUCT:\n            return products.filter(({ id }) => id !== payload.id);\n\n        case DELETE_ALL_PRODUCTS:\n            return [];\n\n        default:\n            return products;\n    }\n};\n\nexport default productReducer;"]},"metadata":{},"sourceType":"module"}